<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"> 
	<head> 
		<title>Framework Documentation</title> 
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<link rel="stylesheet" type="text/css" href="css/reset.css" />
		<link rel="stylesheet" type="text/css" href="css/documentation.css" />
	</head>
	<body>
	 	<h1>Framework Documentation</h1>
	 	
	 	
	 	<div class="note error" id="error">
	 		<span>!</span>
 			<p>If you are viewing this page in error, you were able to browse to the framework's directory.
	 		Only your app's /public/ directory should be public, not the base folder of your app, nor the
	 		framework's folder.</p>
		</div>
		
		
	 	<table class="borderedBox">
	 		<tr>
	 			<td class="menu">
			 		<h3>Table of Contents</h3>
			 		<ol>
			 			<li><a href="#basics">The Basics</a></li>
			 			<li>
				 			<a href="#views">Views</a>
				 			<ol>
				 				<li><a href="#views-variables">Variables</a></li>
				 				<li><a href="#views-functions">Functions</a></li>
				 			</ol>
			 			</li>
			 			<li>
				 			<a href="#controllers">Controllers</a>
				 			<ol>
				 				<li><a href="#controllers-variables">Variables</a></li>
				 				<li><a href="#controllers-functions">Functions</a></li>
				 			</ol>
			 			</li>
			 			<li>
				 			<a href="#tables">Tables</a>
				 			<ol>
				 				<li><a href="#tables-variables">Variables</a></li>
				 				<li><a href="#tables-functions">Functions</a></li>
				 				<li><a href="#tables-rows">Rows</a></li>
				 			</ol>
			 			</li>
			 			<li>
				 			<a href="#misc">Misc</a>
				 			<ol>
				 				<li><a href="#misc-globals">Globals.php</a></li>
				 				<li><a href="#misc-app">App.php</a></li>
				 				<li><a href="#misc-sqldump">MySQL Dump</a></li>
				 				<li><a href="#misc-howitworks">How it works</a></li>
				 				<li><a href="#misc-file">File Structure</a></li>
				 			</ol>
			 			</li>
			 		</ol>
		 		</td>
		 		<td>
		 			<h3>About</h3>
				 	<p>I built this framework to be very light-weight and simple.
				 	It should be easy enough for any developer to look into its
				 	source-code and understand exactly what's going on. At the time
				 	of writing, there are less than 600 lines of code, so it's not
				 	very complex at all.</p>
				 	<p>Some goals of this framework are:</p>
			 		<ul>
			 			<li><b>Fast and easy to learn</b></li>
			 			<li><b>Fast and easy to use</b></li>
			 			<li>Light-Weight</li>
			 			<li>Minimum setup time</li>
			 		</ul>
				 	<p>Part of those goals is keeping the documentation to this
				 	one page, and keeping this one page to a small size :)</p>
		 		</td>
	 		</tr>
 		</table>
	 	
	 	
	 	<div class="spacer">
		 	<h2 id="basics">The Basics</h2>
		 	<div class="spacer borderedBox">
		 		<p>There are Views, Controllers, and Models. These three interact
		 		in an MVC pattern, however I prefer calling Models Tables.</p>
		 		<p>Your app's folder structure will need to look something like this:</p>
<pre>
app/
    _tables/
    _layouts/
    index/
etc/
public/
</pre>
				<p>When you go to <i>yourwebsite.com/page/subpage</i>, the core will look
				in the '<i>app</i>' folder for your '<i>page</i>' folder. where it will open
				<i>pageController.php</i>, which will call it's <i>subpageView()</i> function, then display
				the <i>page-subpageView.php</i> script.</p>
				<p>Your website should have a <i>/public/</i> directory, with an <i>index.php</i> which
				<i>require_once()</i>'s the <i>core.php</i>. /public/ should also have /css/ and /js/ dirs.</p>
				<p>Aside from /public/, you also need /etc/ with config.ini and globals.php.</p>
				<p>Most importantly, aside from /public/ and /etc/, you need /app/. In /app/,
				you can make an app.php, with a class 'app'. if it has a constructor,
				it will be passed the 'core' object</p>
				<p>In the /app/ dir, you need a new folder for each directory of your website.
				In each of those directory folders, you need a controller and some views.
				In /app/ there's also /_tables/ and /_layouts/ dirs, for putting your layouts
				and tables into.</p>
		 	</div>
		 	
		 	
		 	<h2 id="views">Views</h2>
		 	<div class="spacer borderedBox">
			 	<ul>
				 	<li>Can be just plain HTML, or a combination of HTML and PHP.</li>
					<li>Think of these as old-school "scripts".</li>
					<li>They are for display only, and no manipulation of data or anything like
					that is done here.</li>
					<li>Ideally, just HTML with a couple &lt;?=$this-&gt;myVar?&gt; tags through-out.</li>
					<li>Note: Use "init()" if you want a constructor.</li>
				</ul>
				<h3 id="views-variables">Variables</h3>
				<ul>
					<li>$this-&gt;controller // The controller</li>
					<li>$this-&gt;myVar // Any variable can be set to this view from the
					controller. eg. myVar</li>
				</ul>
				<h3 id="views-functions">Functions</h3>
				<ul>
					<li>$this-&gt;getNote() // Gets a note stored by setNote(); trancends redirect();</li>
					<li>$this-&gt;getError() // Gets an error stored by setError(); trancends redirect();</li>
				</ul>
		 	</div>
		 	
		 	
		 	<h2 id="controllers">Controllers</h2>
		 	<div class="spacer borderedBox">
				<p>
					Controllers control the pages of your site.
					<br />You need an /index/ dir, with an idnexController.php with an
					indexView() function, and an indexView.php. These will be used when
					people visit website.com/
					<br />You can make a /mypage/ dir, with a mypageController.php with
					a indexView() function, and a mypageView.php. That would be used when
					people visit website.com/mypage
					<br />You can do a mypage-subpageView.php, and it will be shown at
					website.com/mypage/subpage. the subpageView() function would be called
					from the controller.
					<br />Controllers have a $this-&gt;view object. You can store variables
					for your view in there.
					<br />Note: Use "init()" if you want a constructor.
				</p>
				<h3 id="controllers-variables">Variables</h3>
				<ul>
					<li>$this-&gt;core // The core</li>
					<li>$this-&gt;view // The view. Use $this-&gt;view-&gt;myVar = 'hello world'
					to set the myVar variable.</li>
				</ul>
				<h3 id="controllers-functions">Functions You Should Make</h3>
				<ul>
					<li>defaultView() // If you don't specify a subpageView() function for
					a subPage, this function will get called.</li>
					<li>mysubpageView() // Each sub-page can have its own function to do
					some processing and set its variables etc.</li>
				</ul>
				<h3>Functions Available to You</h3>
				<ul>
					<li>$this-&gt;newTable() // Creates instantiates and returns you a table</li>
					<li>$this-&gt;setNote() // Adds a note, best used after a POST, followed by an empty redirect()</li>
					<li>$this-&gt;setError() // Adds an error, like setNote</li>
					<li>$this-&gt;redirect() //  Redirects the user to whichever page you specify</li>
					<li>$this-&gt;setTitle() // Sets the page's title. defaults to the one in config.ini</li>
					<li>$this-&gt;addCSS() // Adds a stylesheet</li>
					<li>$this-&gt;addJS() // Adds a javascript</li>
					<li>$this-&gt;core-&gt;error() // Good for 404 cases. If config's 'debug' is on, gives a helpful error, otherwise shows your 404 page.</li>
					<li>$this-&gt;setLayout() // sets the layout file to use.</li>
				</ul>
		 	</div>
		 	
		 	
		 	<h2 id="tables">Tables</h2>
		 	<div class="spacer borderedBox">
			 	<p>
					Tables need to be stored in the /_tables/ directory.
					<br />If your database had a table called 'users', you would probably
					want a 'usersTable.php'
					<br />It would have a class 'usersTable extends table'.
					<br />You should define the table name and primary key for maximum
					functionality, private $table = 'users'; and private $key = 'user_id';
					<br />Your controller could instantiate one of these tables by doing
					$userTable = $this-&gt;newTable('users');
				</p>
				<h3 id="tables-variables">Variables You Should Define</h3>
				<ul>
					<li>$table // the database table name</li>
					<li>$key // The primary key of the table</li>
				</ul>
				<h3>Variables Available to You:</h3>
				<ul>
					<li>$this-&gt;controller // The controller which created this table.</li>
				</ul>
				<h3 id="tables-functions">Functions</h3>
				<ul>
					<li>$this-&gt;query() // Runs a SQL SELECT, returning the results</li>
					<li>$this-&gt;insert() // Runs a SQL INSERT query, returning new row's ID</li>
					<li>$this-&gt;update() // Runs a SQL UPDATE or DELETE query, returns
					the # of affected rows</li>
					<li>$this-&gt;get() // a smart function. read its doc :)</li>
					<li>$this-&gt;set() // a smart function. read its doc :)</li>
				</ul>
				<h3 id="tables-rows">Rows</h3>
				<p>Tables can return row objects, these have their own usage functions.</p>
				<h4>Table's Functions Regarding Rows</h4>
				<ul>
					<li>$this-&gt;createRow() // creates a new row, returns you the object.
					make sure to use $row-&gt;save()</li>
					<li>$this-&gt;getRow() // selects a row and returns it.</li>
					<li>$this-&gt;getRows() // selects several rows, and returns them.</li>
				</ul>
				<h4>Row's Functions</h4>
				<ul>
					<li>$row-&gt;save(); // saves the row. if it's a new row, will fill in the
					primary key for you</li>
				</ul>
				<h4>Row's Variables</h4>
				<ul>
					<li>$row-&gt;myCol // a col. set all the cols to what you want, then save().
					or, read all the cols</li>
				</ul>
		 	</div>
		 	
		 	
		 	<h2 id="misc">Misc</h2>
		 	<div class="spacer borderedBox">
		 		<p>There's a bit of extra functionality you might find if you read
				through the source code, just some miscelaneous features I needed.
				Please don't hesitate to read through the source code, It should be
				internally documented enough.</p>
				
				<h3 id="misc-globals">Globals.php</h3>
				<p>Any functions defined in globals.php are available everywhere,
				just like regular PHP functions. The core has it's own globals.php,
				but here's also an (empty) globals.php in your app's /etc/ dir,
				You can put whatever global functions you like in there.</p>
				
				<h3 id="misc-app">App.php</h3>
				<p>In the /app/ dir, there is an app.php. with class app extends controller. You
				can put whatever functionality you like here, and it will be available globally,
				from a controller you could get to it via "$this-&gt;core-&gt;app-&gt;myFunction()".
				Also, because the app class is always instantiated, code you put in its contructor
				will always be called prior to running your controllers.</p>
				
				<h3 id="sqldump">MySQL Dump</h3>
				<p>If you configure your mysql_dir (as well as connection details and debug) in config, 
				and put "?sqldump" into your URI, then the framework will do an sql dump for you.</p>
				
				<h3 id="misc-howitworks">How it works</h3>
				<ol>
					<li>If an app.php controller is defined, the core instantiates it. (Core.php, loadApp())</li>
					<li>The core looks at the URI's first part, and loads the corresponding Controller (Core.php, loadController())</li>
					<li>Your controller looks at the URI's second part, runs the corresponding View() function (Controller.php, Controller())</li>
					<li>Your controller saves the view.php file into the core's pageDetails Array. (Controller.php, Controller())</li>
					<li>The core displays the Layout file, which tells the view object to include the view. </li>
				</ol>
				
				<h3 id="misc-file">File Structure</h3>
		 		<p>Here's a summary of each file and folder's purpose. Note that /framework/ and
		 		/app1/ can be wherever you want. The only important thing is that your webserver's
		 		root is pointed to /yourapp/public/, that file require_once's framework/core.php
		 		(wherever you decide to put it), and that you update /yourapp/etc/config.ini.</p>
<pre>
framework/
	empty_app/ (bare-bones application skeleton - Copy this to start your own site.)
	example_app/ (an example app - can be deleted)
	doc/ (This documentation)
	controller.php (Your own controllers extend this)
	core.php (Must be included from your own index.php)
	globals.php (These are global functions)
	index.html (catch for misconfiguration. should not be seen)
	index.php (catch for misconfiguration. should not be seen)
	row.php (You can use tables to return rows)
	table.php (Your own tables must extend this)
	view.php (Your views will have any functionality this class has. You don't need to extend it.)
app1/ (Your own app dirs can be anywhere)
	public/ (Point your webserver's public directory here.)
		css/ (your .css files go here)
		js/ (your .js files go here)
		img/ (your image files go here. Feel free to rename this media or whatever)
		.htaccess (Ensures all neccesary requests are handled by the core)
		index.html (Just in case php is disabled, put a nice "experiencing difficulties" note here)
		index.php (All your index.php needs to do is include the framework's core.php)
	app/
		_layouts/
			defaultLayout.php (Mandatory, this will invlude your view)
			emptyLayout.php (Helpful for ajax-requests)
		_tables/
			table1.php (Your own tables (other frameworks might call models)
		index/ (You need an index dir)
			indexController.php (You need an indexController.php)
			indexView.php (You need a indexView.php)
			404View.php (If config's 'debug' is false, this page will be shown in case of error)
		dir2/ (For yourwebsite.com/dir2/)
			dir2Controller.php (Each directory needs its own controller)
			dir2View.php (each directory needs its own View.php)
			dir2-subdirView.php (you can have as many sub-dirs you like this way yoursebsite.com/dir2/subdir/)
		app.php (A Controller that's always called, prior to the specific controller.)
	doc/ (Optional - nice place to put documentation. I suggest a todo.txt and/or bugs.txt)
	etc/
		config.ini (default page titles, dbase connection details, debug mode etc.)
		globals.php (Your very own place to put global functions)
		error.log (If config's 'debug' is off, a 404 will be shown, and the error logged here.)
	index.html (catch for misconfiguration. should not be seen)
	index.php (catch for misconfiguration. should not be seen)
</pre>
	 		</div>
	 	</div>
	 	
	 	
	 	<script type="text/javascript">
		// <![CDATA[
		window.onload = function () { 
			if(document.location.hash=='#error') {
				document.getElementById('error').setAttribute('style','display:block')
			}
		}
		// ]]>
		</script>
		
		
	</body>
</html>